{"version":3,"sources":["views/access-requests/AccessRequests.js","_shared/services/Axios.js"],"names":["AccessRequests","columns","name","selector","sortable","cell","row","color","getBadge","status","useState","data","setData","loading","setLoading","totalRows","setTotalRows","perPage","setPerPage","fetchRequests","page","a","axios","get","response","requests","count","handlePerRowsChange","newPerPage","useEffect","xl","title","progressPending","pagination","paginationServer","paginationTotalRows","selectableRows","selectableRowsHighlight","highlightOnHover","onChangeRowsPerPage","onChangePage","defaults","baseURL","process","interceptors","request","use","config","token","localStorageService","getAccessToken","headers","error","Promise","reject"],"mappings":"kMA2GeA,UApGf,WACE,IAAMC,EAAU,CACd,CACEC,KAAM,KACNC,SAAU,MACVC,UAAU,GAEZ,CACEF,KAAM,aACNC,SAAU,iBACVC,UAAU,GAEZ,CACEF,KAAM,YACNC,SAAU,gBACVC,UAAU,GAEZ,CACEF,KAAM,SACNE,UAAU,EACVC,KAAM,SAACC,GAAD,OACJ,oCAAG,kBAAC,IAAD,CAAQC,MAAOC,EAASF,EAAIG,SAAUH,EAAIG,YAK7CD,EAAW,SAACC,GAChB,OAAQA,GACN,IAAK,SACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,WACH,MAAO,SACT,QACE,MAAO,YAnCW,EAuCAC,mBAAS,IAvCT,mBAuCjBC,EAvCiB,KAuCXC,EAvCW,OAwCMF,oBAAS,GAxCf,mBAwCjBG,EAxCiB,KAwCRC,EAxCQ,OAyCUJ,mBAAS,GAzCnB,mBAyCjBK,EAzCiB,KAyCNC,EAzCM,OA0CMN,mBAAS,IA1Cf,mBA0CjBO,EA1CiB,KA0CRC,EA1CQ,KA4ClBC,EAAa,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACpBP,GAAW,GADS,SAEGQ,IAAMC,IAAN,+BACGH,EADH,qBACoBH,IAHvB,OAEdO,EAFc,OAKpBZ,EAAQY,EAASb,KAAKc,UACtBT,EAAaQ,EAASb,KAAKe,OAC3BZ,GAAW,GAPS,2CAAH,sDAcba,EAAmB,uCAAG,WAAOC,EAAYR,GAAnB,eAAAC,EAAA,6DAC1BP,GAAW,GADe,SAGHQ,IAAMC,IAAN,+BACGH,EADH,qBACoBQ,IAJjB,OAGpBJ,EAHoB,OAO1BZ,EAAQY,EAASb,KAAKc,UACtBP,EAAWU,GACXd,GAAW,GATe,2CAAH,wDAgBzB,OAJAe,qBAAU,WACRV,EAAc,KACb,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMW,GAAI,IACR,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,kBACN9B,QAASA,EACTU,KAAMA,EACNqB,gBAAiBnB,EACjBoB,YAAU,EACVC,kBAAgB,EAChBC,oBAAqBpB,EACrBqB,gBAAc,EACdC,yBAAuB,EACvBC,kBAAgB,EAChBC,oBAAqBZ,EACrBa,aArCa,SAACpB,GACxBD,EAAcC,Y,iCC9DlB,+BAGAE,IAAMmB,SAASC,QACbC,wDAEFrB,IAAMsB,aAAaC,QAAQC,KACzB,SAACC,GACC,IAAMC,EAAQC,IAAoBC,iBAIlC,OAHIF,IACFD,EAAOI,QAAP,cAAkC,UAAYH,GAEzCD,KAET,SAACK,GACCC,QAAQC,OAAOF,MAIJ9B,MAAf","file":"static/js/11.67cc50bd.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"../../_shared/services/Axios\";\n\nimport DataTable from \"react-data-table-component\";\nimport { CCard, CCardBody, CRow, CCol, CBadge } from \"@coreui/react\";\n\nfunction AccessRequests() {\n  const columns = [\n    {\n      name: \"Id\",\n      selector: \"_id\",\n      sortable: true,\n    },\n    {\n      name: \"First Name\",\n      selector: \"user.firstname\",\n      sortable: true,\n    },\n    {\n      name: \"Last Name\",\n      selector: \"user.lastname\",\n      sortable: true,\n    },\n    {\n      name: \"Status\",\n      sortable: true,\n      cell: (row) => (\n        <>{<CBadge color={getBadge(row.status)}>{row.status}</CBadge>}</>\n      ),\n    },\n  ];\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"ACTIVE\":\n        return \"warning\";\n      case \"APPROVED\":\n        return \"success\";\n      case \"DECLINED\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalRows, setTotalRows] = useState(0);\n  const [perPage, setPerPage] = useState(10);\n\n  const fetchRequests = async (page) => {\n    setLoading(true);\n    const response = await axios.get(\n      `/accessrequests?page=${page}&per_page=${perPage}`\n    );\n    setData(response.data.requests);\n    setTotalRows(response.data.count);\n    setLoading(false);\n  };\n\n  const handlePageChange = (page) => {\n    fetchRequests(page);\n  };\n\n  const handlePerRowsChange = async (newPerPage, page) => {\n    setLoading(true);\n\n    const response = await axios.get(\n      `/accessrequests?page=${page}&per_page=${newPerPage}`\n    );\n\n    setData(response.data.requests);\n    setPerPage(newPerPage);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchRequests(1);\n  }, []);\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <CCard>\n          <CCardBody>\n            <DataTable\n              title=\"Access Requests\"\n              columns={columns}\n              data={data}\n              progressPending={loading}\n              pagination\n              paginationServer\n              paginationTotalRows={totalRows}\n              selectableRows\n              selectableRowsHighlight\n              highlightOnHover\n              onChangeRowsPerPage={handlePerRowsChange}\n              onChangePage={handlePageChange}\n            ></DataTable>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n}\n\nexport default AccessRequests;\n","import axios from \"axios\";\nimport localStorageService from \"./LocalStorageService\";\n\naxios.defaults.baseURL =\n  process.env.REACT_APP_API_URL || \"http://localhost:3000/api/v1/\";\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorageService.getAccessToken();\n    if (token) {\n      config.headers[\"Authorization\"] = \"Bearer \" + token;\n    }\n    return config;\n  },\n  (error) => {\n    Promise.reject(error);\n  }\n);\n\nexport default axios;\n"],"sourceRoot":""}